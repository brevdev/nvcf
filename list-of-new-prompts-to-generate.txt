<ant-meta-thought eventual-goal="list-of-new-prompts-to-generate.txt"
  current-task="Generate a meta-prompt for Claude to extend the nvcf codebase">

To generate an effective meta-prompt, I'll need to analyze the existing codebase structure, identify areas for potential expansion, and formulate clear instructions for Claude to extend the functionality in a coherent manner.

</ant-meta-thought>

<scratchpad>
Key observations from the codebase:
1. Main package structure: api, cmd, config, output
2. Uses Cobra for CLI commands
3. Implements authentication, function management, and basic output handling
4. Some planned commands are commented out (e.g. authLogoutCmd, authStatusCmd)
5. Many API endpoints and features are not yet implemented

Potential areas for expansion:
1. Implement missing CLI commands (logout, status, etc.)
2. Add more API client methods in api/client.go
3. Expand function management capabilities
4. Implement deployment and invocation features
5. Add asset management functionality
6. Implement queue management
7. Add cluster group management features
8. Improve error handling and logging
9. Enhance output formatting options
10. Add unit tests and integration tests

</scratchpad>

<ant-meta-thought>
Based on the analysis, I'll create a meta-prompt that guides Claude to extend the codebase in a structured and comprehensive manner, focusing on implementing missing features and improving existing functionality.
</ant-meta-thought>

Here's the meta-prompt for Claude to extend the nvcf codebase:

```
As an AI assistant with expertise in Go programming and CLI development, your task is to extend and improve the nvcf codebase. Follow these guidelines:

1. Implement missing CLI commands:
   - Add authLogoutCmd and authStatusCmd in cmd/auth.go
   - Implement functionCreateCmd, functionGetCmd, functionUpdateCmd, functionDeleteCmd, and functionVersionCmd in cmd/function.go
   - Create new files for deployment, invoke, asset, queue, and cluster-group commands

2. Expand API client functionality in api/client.go:
   - Implement WithHTTPClient, header manipulations, BaseURL, and env handling options
   - Add methods for creating, updating, and deleting functions
   - Implement methods for deployment, invocation, and asset management

3. Enhance function management capabilities:
   - Add support for function versioning
   - Implement function update and delete operations
   - Add validation for function creation and update parameters

4. Implement deployment and invocation features:
   - Create a new file cmd/deployment.go for deployment-related commands
   - Implement deployment creation, update, and deletion
   - Add invocation functionality in cmd/invoke.go, including support for synchronous and asynchronous invocations

5. Add asset management functionality:
   - Create a new file cmd/asset.go for asset-related commands
   - Implement asset upload, download, list, and delete operations

6. Implement queue management:
   - Create a new file cmd/queue.go for queue-related commands
   - Add support for listing queues and checking request positions

7. Add cluster group management features:
   - Create a new file cmd/cluster_group.go for cluster group-related commands
   - Implement listing and managing cluster groups

8. Improve error handling and logging:
   - Implement a consistent error handling mechanism across the codebase
   - Add detailed logging for debugging purposes

9. Enhance output formatting:
   - Expand the output package to support multiple formats (e.g., JSON, YAML, table)
   - Implement color-coded output for different message types

10. Add unit tests and integration tests:
    - Create test files for each package
    - Implement unit tests for critical functions
    - Add integration tests for CLI commands

For each task, provide the Go code implementation along with brief comments explaining the functionality. Ensure that the code follows Go best practices and maintains consistency with the existing codebase structure.

```

<ant-meta-thought>
This meta-prompt provides a comprehensive guide for Claude to extend the nvcf codebase. It covers all the major areas identified for improvement and expansion, while maintaining consistency with the existing structure and coding style. The prompt is structured to encourage a systematic approach to implementing new features and enhancing existing functionality.
</ant-meta-thought>